类之间的关系：
   1.依赖  ------->   people  read(Book book)    people ----->Book
   2.关联  ———————>   people  Book book  read(){book.getName() }
   3.聚合  ◇—————>   people  Book book   Cloth cloth   people wear cloth and  read book
   4.组合 ◆——————>   people  Soul soul Body body   People(Soul soul , Body body){this.soul = soul ; this.body = body}
   5.实现 -------▲
   5.继承 ———————▲


设计模式
   1. 开闭原则
      软件应该尽量在不修改源代码的情况下进行扩展，  对扩展开放、对修改关闭
   2. 里氏代换原则
      所有引用基类的地方，都必须能透明的使用其子类的对象
   3. 依赖倒换原则
      抽象不应该依赖细节，细节应该依赖抽象
   4. 单一职责原则
      一个类只负责一个功能
   5. 接口隔离原则
      使用多个隔离的接口，而不是使用一个单一的总接口
   6. 迪米特法则
      一个软件实体应当尽可能少的与其他实体发生作用


23种设计模式：
   1.创建型模式：工厂方法、抽象工厂方法、单例模式、建造者模式、原型模式
   2.结构型模式：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式
   3.行为型模式：策略模式、模板方法模式、观察者模式、迭代模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式



构建型设计模式： 创造类
结构性设计模式： 结构模式就像搭积木，将不同的类结合在一起，成为一个契合的类关系
行为型设计模式： 类与类之间的交互和协作

适配器模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作
桥接模式：将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体模式或接口模式
组合模式：又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，
         用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。
装饰模式：动态地给一个对象增加一些额外的职责，就增加对象功能来说，装饰模式比生成子类实现更为灵活。其别名也可以称为包装器，与适配器模式的别名相同，但它们适用于不同的场合
外观模式：外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式
代理模式：给某一个对象提供一个代理，并由代理对象控制对原对象的引用。

观察者模式（Observer Pattern）：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。
状态模式（State Pattern）：当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类
策略模式（Strategy Pattern）：定义了一系列算法，并将每一个算法封装起来，而且使它们还可以相互替换。策略模式让算法独立于使用它的客户而独立变化。
模板方法模式（Template Method Pattern）：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤
访问者模式（Visitor Pattern）：表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。
备忘录模式：在不破坏封装的条件下，通过备忘录对象存储另外一个对象内部状态的快照，在将来合适的时候把这个对象还原到存储起来的状态
迭代器模式（Iterator Pattern）：提供一种方法访问一个容器对象中各个元素，而又不需暴露该对象的内部细节。
中介者模式（Mediator Pattern）：定义一个中介对象来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。
责任链模式：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。
命令模式：将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。














